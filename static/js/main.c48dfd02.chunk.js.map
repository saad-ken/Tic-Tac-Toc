{"version":3,"sources":["components/Square.js","components/Board.js","components/History.js","components/StatusMessage.js","App.js","helpers.js","index.js"],"names":["Square","value","click","isWinningSquare","type","onClick","className","Board","board","handleSquare","winningSquare","renderSquare","position","includes","History","history","moveTo","currentMove","map","_","move","StatusMessage","winner","current","noMovesLeft","every","el","isOnext","New_Game","Array","fill","App","useState","setHistory","setCurrentMove","curr","squares","lines","i","length","a","b","c","calculateWinner","prev","last","newBoard","square","pos","concat","style","fontWeight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c48dfd02.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Square = ({value,click,isWinningSquare}) => {\r\n    return (\r\n        <button \r\n        type=\"button\" \r\n        onClick={click} \r\n        className={`square ${isWinningSquare ? 'winning': ''} ${value === 'X' ? 'text-x' : 'text-o'} `}>{value}</button>\r\n    )\r\n}\r\n\r\nexport default Square\r\n","import React from 'react'\r\nimport Square from './Square'\r\n\r\nconst Board = ({board , handleSquare , winningSquare}) => {\r\n\r\n    \r\n    const renderSquare = position =>{\r\n        const isWinningSquare = winningSquare.includes(position)\r\n        \r\n        return(\r\n            <Square \r\n            value={board[position]} \r\n            click={() => handleSquare(position)}\r\n            isWinningSquare={isWinningSquare}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='board'>\r\n        <div className='board-row'>\r\n\r\n            {renderSquare(0)}\r\n            {renderSquare(1)}\r\n            {renderSquare(2)}\r\n\r\n        </div>\r\n\r\n        <div  className='board-row'>\r\n            {renderSquare(3)}\r\n            {renderSquare(4)}\r\n            {renderSquare(5)}\r\n \r\n        </div>\r\n        \r\n        <div className='board-row'>\r\n            {renderSquare(6)}      \r\n            {renderSquare(7)}      \r\n            {renderSquare(8)}      \r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Board\r\n","import React from 'react'\r\n\r\nconst History = ({history,moveTo,currentMove}) => {\r\n    return (\r\n        <div className='history-wrapper'>\r\n            <ul className='history'>\r\n                {\r\n                    history.map((_ , move) =>{\r\n                        return(\r\n                            <li key={move}>\r\n                            <button \r\n                            className={`btn-move ${move === currentMove ? 'active' : ''}`}\r\n                            type='button' \r\n                            onClick={() =>{moveTo(move)}}>\r\n                            {move === 0 ? 'Start of the Game ' :\r\n                            `Previous Move # ${move}`}</button>\r\n                        </li>\r\n                    )\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default History\r\n","import React from 'react'\r\n\r\nconst StatusMessage = ({winner , current ,}) => {\r\n    // const message = winner ? `Winner is ${winner}` : `Next Player is ${curr.isOnext ? 'X' : 'O'}`;\r\n\r\n    const noMovesLeft = current.board.every((el)=> el !== null)\r\n\r\n    return (\r\n        <div className='status-message'>\r\n            {winner && \r\n            <>\r\n            Winner is <span className={winner === 'X' ? 'text-x' : 'text-o'}>{winner}</span>\r\n            </> }\r\n            \r\n            {!winner && !noMovesLeft && \r\n            <>\r\n            Next Player is <span className={current.isOnext ? 'text-x' : 'text-o'}>\r\n                {current.isOnext ? 'X' : 'O'}</span>\r\n            </>}\r\n\r\n            {!winner && noMovesLeft && (\r\n                <>\r\n                <span className='text-x'>X</span> and <span className='text-o'>O</span> tied\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatusMessage\r\n","import { useState } from \"react\";\nimport Board from \"./components/Board\";\nimport History from \"./components/History\";\nimport StatusMessage from \"./components/StatusMessage\";\nimport { calculateWinner } from \"./helpers\";\nimport './styles/root.scss'\n\n\nconst New_Game = [\n  {board:Array(9).fill(null) , isOnext:true}\n]\n\nfunction App() {\n\n    const [history, setHistory] = useState(New_Game)\n    const [currentMove, setCurrentMove] = useState(0)\n    const curr = history[currentMove]\n    \n    const {winner,winningSquare} = calculateWinner(curr.board)\n\n\n    \n\n    const handleSquare = (position)=>{\n      if(curr.board[position] || winner){\n        return\n      }\n\n        setHistory(prev =>{\n\n          const last = prev[prev.length - 1]\n\n            const newBoard = last.board.map((square , pos) =>{\n                if (pos === position) {\n                    return last.isOnext ? 'X' : 'O'\n                } else {\n                    return square\n                }\n            })\n\n            return prev.concat({board : newBoard , isOnext:!last.isOnext})\n        })\n\n      setCurrentMove(prev => prev + 1 )\n\n    }\n\n    const moveTo =(move) =>{\n      setCurrentMove(move)\n    }\n\n    const onNewGame =()=>{\n      setHistory(New_Game)\n      setCurrentMove(0)\n    }\n\n  return (\n    <div className=\"app\">\n      <h1>Tic <span className=\"text\">Tac</span>  Toe</h1>\n      <StatusMessage winner={winner} current ={curr}/>\n      <Board \n      board={curr.board} \n      handleSquare={handleSquare}\n      winningSquare ={winningSquare}/>\n\n      <button type=\"button\" onClick={onNewGame} className={`btn-reset ${winner ? 'active' : '' }`} >\n      Start New Game</button>\n      <h2 style={{\n        fontWeight: 'normal'\n      }}>Current Game History</h2>\n      <History history = {history} moveTo={moveTo} currentMove={currentMove}/>\n      <div className=\"bg-balls\"/>\n    </div>  \n  );\n}\n\nexport default App;\n","export function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] \r\n        && squares[a] === squares[b] \r\n        && squares[a] === squares[c]) {\r\n        // return  squares[a]\r\n\r\n        return {\r\n          winner : squares[a],\r\n          winningSquare : [a,b,c]\r\n        }\r\n    \r\n       \r\n      }\r\n    }\r\n    return {\r\n      winner : null,\r\n      winningSquare : []\r\n    }\r\n    \r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('react')\n);\n\n\n"],"sourceRoot":""}